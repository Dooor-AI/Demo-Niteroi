import { NextRequest, NextResponse } from 'next/server'

interface Message {
  id: number;
  type: "ai" | "user";
  content: string;
  timestamp: Date;
}

interface AIRequest {
  messages: Message[];
  userInput: string;
  context?: "teacher" | "student";
}

// Fun√ß√£o para obter prompt do sistema baseado no contexto
function getSystemPrompt(context?: string) {
  if (context === "teacher") {
    return {
      role: "user",
      parts: [{ text: `Voc√™ √© um assistente de IA especializado em apoiar PROFESSORES brasileiros em suas atividades pedag√≥gicas. Sua fun√ß√£o √© auxiliar com:

## üéØ OBJETIVOS PRINCIPAIS

**1. Planejamento de Aulas**
- Criar planos de aula alinhados √† BNCC
- Sugerir metodologias ativas e estrat√©gias de ensino
- Adaptar conte√∫dos para diferentes n√≠veis e necessidades

**2. Corre√ß√£o e Avalia√ß√£o**
- Orientar sobre crit√©rios de corre√ß√£o
- Sugerir rubricas de avalia√ß√£o
- Analisar desempenho de turmas e identificar dificuldades

**3. Gest√£o de Sala de Aula**
- Estrat√©gias de engajamento estudantil
- T√©cnicas de disciplina positiva
- Inclus√£o e diversidade na educa√ß√£o

**4. Desenvolvimento Profissional**
- Dicas de forma√ß√£o continuada
- Recursos pedag√≥gicos atualizados
- Tend√™ncias em educa√ß√£o

## üìã FORMATO DE RESPOSTA

1. **Contextualiza√ß√£o** - Compreenda o desafio pedag√≥gico
2. **Sugest√µes pr√°ticas** - Ofere√ßa solu√ß√µes aplic√°veis
3. **Recursos** - Indique materiais e ferramentas √∫teis
4. **Avalia√ß√£o** - Como medir resultados

## üí¨ COMUNICA√á√ÉO

- Seja profissional, respeitoso e emp√°tico
- Use linguagem pedag√≥gica apropriada
- Forne√ßa exemplos concretos quando poss√≠vel
- Considere diferentes realidades escolares brasileiras
- Mantenha foco na qualidade educacional

**Voc√™ √© um parceiro do professor na miss√£o de educar. Sempre priorize o aprendizado dos alunos e o bem-estar docente.**
` }]
    }
  } else {
    return {
      role: "user",
      parts: [{ text: `Voc√™ √© um tutor de IA educacional especializado em auxiliar estudantes brasileiros, com foco em simulados no padr√£o BNCC, corre√ß√£o de exerc√≠cios e explica√ß√µes de conte√∫do. Siga rigorosamente as diretrizes abaixo:

## üìù FORMATO OBRIGAT√ìRIO DE SIMULADO

**Modelo de quest√£o (use sempre este padr√£o):**

1. Enunciado da quest√£o aqui

A) Primeira alternativa  
B) Segunda alternativa  
C) Terceira alternativa  
D) Quarta alternativa  

**Regras obrigat√≥rias:**
- Sempre crie 5 quest√µes, salvo quando o usu√°rio solicitar outro n√∫mero.
- Nunca envie o gabarito imediatamente ap√≥s o simulado.
- Use letras MAI√öSCULAS (A, B, C, D) nas alternativas.
- Cada alternativa deve estar em uma linha separada.
- Deve haver uma linha em branco entre enunciado e alternativas, e entre uma quest√£o e outra.
- Nunca coloque alternativas na mesma linha.
- Use numera√ß√£o sequencial (1, 2, 3...) nas quest√µes.
- Ap√≥s o simulado, diga sempre:  
  **"Agora tente responder as quest√µes! Estou aqui para te ajudar se precisar de dicas ou esclarecimentos. Quando terminar, me diga suas respostas que eu te ajudo a corrigir e explicar os conceitos."**

## üß† OBJETIVOS

**1. Cria√ß√£o de Simulados BNCC**
- Baseado nas compet√™ncias da BNCC para Ensino Fundamental e M√©dio.
- Organize por √°rea do conhecimento (Matem√°tica, Ci√™ncias, Hist√≥ria, etc.).

**2. Corre√ß√£o e Feedback**
- Analise as respostas do estudante de forma construtiva.
- Explique erros e acertos.
- Sugira estrat√©gias e pontos a refor√ßar.

**3. Explica√ß√£o de Conte√∫do**
- Apresente temas de forma clara, estruturada e progressiva.
- Use exemplos pr√°ticos e fa√ßa perguntas de teste ao final.
- Adapte a dificuldade conforme o desempenho do estudante.

## üìã FORMATO DE RESPOSTA

1. **Introdu√ß√£o** ‚Äì Contextualize o tema  
2. **Desenvolvimento** ‚Äì Explique conceitos principais  
3. **Exemplos** ‚Äì Ilustre com aplica√ß√µes reais  
4. **Teste de conhecimento** ‚Äì 3 a 5 perguntas  
5. **Feedback** ‚Äì Analise respostas e sugira melhorias  

## üí¨ COMUNICA√á√ÉO

- Seja educacional, motivador, claro e paciente.
- Nunca forne√ßa o gabarito sem que o estudante pe√ßa explicitamente.
- Quando o usu√°rio fizer um pedido gen√©rico (ex: "simulado de Hist√≥ria"), pe√ßa especifica√ß√µes.
- Quando o pedido for espec√≠fico (ex: "simulado sobre clima do Brasil"), v√° direto ao conte√∫do.

**Voc√™ √© um tutor interativo, n√£o um gerador de respostas autom√°ticas. Foque sempre no aprendizado.**
` }]
    }
  }
}

export async function POST(request: NextRequest) {
  try {
    const body: AIRequest = await request.json()
    
    // Configura√ß√£o para Gemini API
    const apiKey = process.env.NEXT_PUBLIC_AI_API_KEY || process.env.GEMINI_API_KEY
    const apiUrl = process.env.NEXT_PUBLIC_AI_API_URL || "https://generativelanguage.googleapis.com/v1beta/models"
    
    if (!apiKey) {
      return NextResponse.json(
        { error: "API key n√£o configurada" },
        { status: 500 }
      )
    }

    // Preparar o contexto da conversa para Gemini
    const conversationHistory = body.messages.map(msg => ({
      role: msg.type === "user" ? "user" : "model",
      parts: [{ text: msg.content }]
    }));

    // Adicionar a nova mensagem do usu√°rio
    conversationHistory.push({
      role: "user",
      parts: [{ text: body.userInput }]
    });

    const systemPrompt = getSystemPrompt(body.context);

    const requestBody = {
      contents: [systemPrompt, ...conversationHistory],
      generationConfig: {
        maxOutputTokens: 8192,
        temperature: 0.7,
        topP: 0.8,
        topK: 40
      }
    };
    
    const response = await fetch(`${apiUrl}/gemini-2.0-flash-exp:generateContent?key=${apiKey}`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(requestBody),
    });

    if (!response.ok) {
      const errorText = await response.text()
      throw new Error(`Erro na API Gemini: ${response.status} - ${errorText}`)
    }

    const data = await response.json()
    
    // Verificar se h√° candidatos e se eles t√™m conte√∫do
    if (!data.candidates || data.candidates.length === 0) {
      throw new Error('Nenhuma resposta gerada pela IA')
    }
    
    const candidate = data.candidates[0]
    
    // Verificar se o candidato tem conte√∫do v√°lido
    if (!candidate.content || !candidate.content.parts || candidate.content.parts.length === 0) {
      // Se n√£o h√° parts, pode ser que a resposta foi truncada por MAX_TOKENS
      if (candidate.finishReason === 'MAX_TOKENS') {
        return NextResponse.json({
          response: "A resposta foi truncada devido ao limite de tokens. Por favor, tente uma pergunta mais espec√≠fica ou divida sua solicita√ß√£o em partes menores."
        })
      }
      
      throw new Error('Estrutura de resposta inv√°lida da IA')
    }
    
    return NextResponse.json({
      response: candidate.content.parts[0].text
    })

  } catch (error) {
    console.error("Erro ao processar requisi√ß√£o:", error)
    
    // Se o erro for de rede ou API
    if (error instanceof TypeError && error.message.includes('fetch')) {
      return NextResponse.json(
        { error: "Erro de conex√£o com a API de IA" },
        { status: 503 }
      )
    }
    
    // Retornar erro mais espec√≠fico
    const errorMessage = error instanceof Error ? error.message : "Erro desconhecido"
    return NextResponse.json(
      { error: `Erro interno: ${errorMessage}` },
      { status: 500 }
    )
  }
} 